1. Find the names of employees who work in the "Finance" department and have made sales on or after "2023-09-16".
Ans db.sales.aggregate([
  { $match: { sale_date: { $gte: "2023-09-16" } } },
  { $lookup: { from: "employees", localField: "employee_id", foreignField: "_id", as: "employee_info" } },
  { $unwind: "$employee_info" },
  { $match: { "employee_info.department_id": 102 } },
  { $project: { "employee_info.name": 1, _id: 0 } }
]);

2. Find the total sales count and total sales amount for each employee who has made a sale, and sort the results by total sales amount in descending order.
Ans db.sales.aggregate([
  { $group: { _id: "$employee_id", total_sales_count: { $sum: 1 }, total_sales_amount: { $sum: "$amount" } } },
  { $sort: { total_sales_amount: -1 } }
]);

 3. Retrieve a list of departments with more than 10 employees.
Ans db.employees.aggregate([
  { $group: { _id: "$department_id", employee_count: { $sum: 1 } } },
  { $match: { employee_count: { $gt: 10 } } },
  { $lookup: { from: "departments", localField: "_id", foreignField: "_id", as: "department_info" } },
  { $unwind: "$department_info" },
  { $project: { "department_info.name": 1, employee_count: 1 } }
]);

 4. Find the employees who have worked in the company for more than 5 years.
Ans db.employees.find({ hire_date: { $lte: "2019-07-31" } }, { name: 1, _id: 0 });

 5. Find the employee with the highest salary.
Ans db.employees.find().sort({ salary: -1 }).limit(1);

 6. List the names and ages of employees in the "HR" department.
 Ans db.employees.find({ department_id: 101 }, { name: 1, age: 1, _id: 0 });

 7. Retrieve the names of employees who have worked on the "Employee Management System" project.
 Ans db.employees.find({ projects: 301 }, { name: 1, _id: 0 });

 8. Find the employees who have not made any sales.
 Ans db.employees.aggregate([
  { $lookup: { from: "sales", localField: "_id", foreignField: "employee_id", as: "sales_info" } },
  { $match: { "sales_info": { $eq: [] } } },
  { $project: { name: 1, _id: 0 } }
]);

 9. List the names of employees who have made a sale in September 2023.
 Ans db.sales.aggregate([
  { $match: { sale_date: { $gte: "2023-09-01", $lt: "2023-10-01" } } },
  { $lookup: { from: "employees", localField: "employee_id", foreignField: "_id", as: "employee_info" } },
  { $unwind: "$employee_info" },
  { $project: { "employee_info.name": 1, _id: 0 } }
]);

 10. Find the departments where the average employee age is greater than 35.
 Ans db.employees.aggregate([
  { $group: { _id: "$department_id", avg_age: { $avg: "$age" } } },
  { $match: { avg_age: { $gt: 35 } } },
  { $lookup: { from: "departments", localField: "_id", foreignField: "_id", as: "department_info" } },
  { $unwind: "$department_info" },
  { $project: { "department_info.name": 1, avg_age: 1, _id: 0 } }
]);

 11. Find the employees who have worked on at least three different projects.
 Ans db.employees.find({ $expr: { $gte: [{ $size: "$projects" }, 3] } }, { name: 1, _id: 0 });

 12. List the names of employees who have not been assigned to any project.
 Ans db.employees.find({ projects: { $exists: true, $eq: [] } }, { name: 1, _id: 0 });

 13. Find the employees who have worked on projects from multiple departments.
 Ans db.employees.aggregate([
  { $lookup: { from: "projects", localField: "projects", foreignField: "_id", as: "project_info" } },
  { $unwind: "$project_info" },
  { $group: { _id: "$_id", department_count: { $addToSet: "$project_info.department" } } },
  { $match: { "department_count.1": { $exists: true } } },
  { $lookup: { from: "employees", localField: "_id", foreignField: "_id", as: "employee_info" } },
  { $unwind: "$employee_info" },
  { $project: { "employee_info.name": 1, _id: 0 } }
]);

 14. Find the employees who have the highest sales amount in a single sale.
 Ans db.sales.aggregate([
  { $group: { _id: "$employee_id", max_sale_amount: { $max: "$amount" } } },
  { $sort: { max_sale_amount: -1 } },
  { $limit: 1 },
  { $lookup: { from: "employees", localField: "_id", foreignField: "_id", as: "employee_info" } },
  { $unwind: "$employee_info" },
  { $project: { "employee_info.name": 1, max_sale_amount: 1, _id: 0 } }
]);

 15. Retrieve the names of employees who have not made a sale in the last 90 days.
 Ans db.sales.aggregate([
  { $match: { sale_date: { $gte: "2023-06-02" } } },
  { $lookup: { from: "employees", localField: "employee_id", foreignField: "_id", as: "employee_info" } },
  { $unwind: "$employee_info" },
  { $project: { "employee_info.name": 1, _id: 0 } }
]);

 16. Find the departments where the total employee salaries exceed $500,000.
 Ans db.employees.aggregate([
  { $group: { _id: "$department_id", total_salary: { $sum: "$salary" } } },
  { $match: { total_salary: { $gt: 500000 } } },
  { $lookup: { from: "departments", localField: "_id", foreignField: "_id", as: "department_info" } },
  { $unwind: "$department_info" },
  { $project: { "department_info.name": 1, total_salary: 1, _id: 0 } }
]);

 17. List the employees who have worked on the "Payroll Software" project and are older than 35.
 Ans db.employees.find({ projects: 302, age: { $gt: 35 } }, { name: 1, _id: 0 });

 18. Find the total number of sales and the total sales amount for each employee in the "HR" department.
 Ans db.sales.aggregate([
  { $lookup: { from: "employees", localField: "employee_id", foreignField: "_id", as: "employee_info" } },
  { $unwind: "$employee_info" },
  { $match: { "employee_info.department_id": 101 } },
  { $group: { _id: "$employee_id", total_sales_count: { $sum: 1 }, total_sales_amount: { $sum: "$amount" } } }
]);

 19. List the employees who have not been assigned to any project in the "Finance" department.
 Ans db.employees.find({ department_id: 102, projects: { $exists: true, $eq: [] } }, { name: 1, _id: 0 });

 20. List the employees who have worked on all projects in the "Engineering" department.
 Ans db.employees.aggregate([
  { $match: { department_id: 103 } },
  { $project: { name: 1, projects: 1, _id: 0 } },
  { $lookup: { from: "projects", localField: "projects", foreignField: "_id", as: "project_info" } },
  { $project: { name: 1, all_projects: { $size: "$project_info" } } },
  { $match: { all_projects: { $eq: 2 } } }
]);
